
find noise to implement (DONE)
    - gaussian white noise (additive) OK
    - poisson noise (additive)        OK
    - speckle noise (multiplicative)  OK
    
add noise to the existing noising function (DONE)
    - (worst case an image has 3 noise types) (only two types to be kept)

visualize the noisy vs the original image (DONE)

4) find architecture
    - one architecture for FullyCNN (DONE)
    - one architecture with CNN, maxpooling and linear layer at the end
    - check if you model's output matches the expected input for the loss function (DONE)
    - check what other possible denoising loss functions are used

#### SAVE MODEL BY LOSS ### (DONE)

4) create anew plots with clean and noisy images with all combinations, along
with the kdeplots

5) clean code

6) find metrics for denoising
    - find possible metrics that measure noise
    - find a cifar-10 trained model to evaluate the different architectures: 
        if the classifier is able to detect more images from one architecture

7) find all the parameters you will test and create a csv file make the pipeline
take input from this file


## Data loading from CIFAR-10 are in range [0, 1], with the Normalization
transformation data are in range [-1, 1], so if you want to change the 
normalization make sure you clip the images correctly in the noisy.py


##### Finally Re-run pipreqs to get all packages ##########